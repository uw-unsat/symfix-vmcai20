#lang s-exp "../../../lang/main.rkt"

(kernel void (fwtKernelSketch [float* tArray] [int step])
  (: int tid group pair match)
  (: float t1 t2)
  (= tid (get_global_id 0))
  (= group (idx tid step 1))                              ; (% tid step)
  (= pair  (+ (* (<< step 1) (idx tid step 1)) group))    ; (/ tid step)
  (= match (+ pair step))
  (= t1 [tArray pair])
  (= t2 [tArray match])
  (= [tArray pair]  (+ t1 t2))
  (= [tArray match] (- t1 t2)))

(kernel void (fwtKernel4Sketch [float4* tArray] [int step])
  (: int tid group pair match)
  (: float4 t1 t2)
  (= tid (get_global_id 0))
  (= step [choose step (/ step 4) (* step 4) (% step 4)]) ; (/ step 4)
  (= group (% tid step))
  (= pair  (+ (* (<< step 1) (/ tid step)) group)) 
  (= match (+ pair step))
  (= t1 [tArray pair])
  (= t2 [tArray match])
  (= [tArray pair]  (+ t1 t2))
  (= [tArray match] (- t1 t2)))


(grammar int (idx [int tid] [int step] [int depth])
  #:base (choose tid step (?? int)) 
  #:else (locally-scoped
          (: int left right)
          (= left  (idx tid step (- depth 1)))
          (= right (idx tid step (- depth 1)))
          [choose left 
                  (+ left right)
                  (- left right)
                  (/ left right)
                  (* left right)
                  (% left right)]))

(kernel void (fwtKernel [float* tArray] [int step])
  (: int tid group pair match)
  (: float t1 t2)
  (= tid (get_global_id 0))
  (= group (% tid step))
  (= pair  (+ (* (<< step 1) (/ tid step)) group)) 
  (= match (+ pair step))
  (= t1 [tArray pair])
  (= t2 [tArray match])
  (= [tArray pair]  (+ t1 t2))
  (= [tArray match] (- t1 t2)))

(kernel void (fwtKernel4 [float4* tArray] [int step])
  (: int tid group pair match)
  (: float4 t1 t2)
  (= tid (get_global_id 0))
  (= step (/ step 4))
  (= group (% tid step))
  (= pair  (+ (* (<< step 1) (/ tid step)) group)) 
  (= match (+ pair step))
  (= t1 [tArray pair])
  (= t2 [tArray match])
  (= [tArray pair]  (+ t1 t2))
  (= [tArray match] (- t1 t2)))

